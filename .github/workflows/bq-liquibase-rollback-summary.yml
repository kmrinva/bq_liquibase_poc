name: Liquibase to BigQuery with Script rollback

on:
  workflow_dispatch:
  push:
    paths:
      - 'liquibase/**'
      - '.github/workflows/bq-liquibase.yml'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      BQ_DATASET: ${{ secrets.BQ_DATASET }}
      SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
      DRY_RUN_ENABLED: 'false'
      LB_TAG: run-${{ github.run_id }}-${{ github.run_attempt }}
      LB_DRIVER: com.simba.googlebigquery.jdbc.Driver
      LB_CHANGELOG: liquibase/changelog.xml
      LB_LOG_LEVEL: info

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Prepare folders
        run: mkdir -p lib

      - name: Download Liquibase CLI
        run: |
          curl -L -o "$RUNNER_TEMP/liquibase.zip" https://github.com/liquibase/liquibase/releases/download/v4.29.2/liquibase-4.29.2.zip
          unzip -q "$RUNNER_TEMP/liquibase.zip" -d "$HOME/liquibase"
          chmod +x "$HOME/liquibase/liquibase"
          echo "LB=$HOME/liquibase/liquibase" >> "$GITHUB_ENV"

      - name: Download Liquibase BigQuery extension (JAR)
        run: |
          curl -L -o lib/liquibase-bigquery-4.33.0.jar https://repo1.maven.org/maven2/org/liquibase/ext/liquibase-bigquery/4.33.0/liquibase-bigquery-4.33.0.jar

      - name: Download BigQuery JDBC driver (Simba)
        run: |
          set -e
          curl -L -o "$RUNNER_TEMP/bqjdbc.zip" "https://storage.googleapis.com/simba-bq-release/jdbc/SimbaJDBCDriverforGoogleBigQuery42_1.6.3.1004.zip"
          unzip -q "$RUNNER_TEMP/bqjdbc.zip" -d "$RUNNER_TEMP/bqjdbc"
          find "$RUNNER_TEMP/bqjdbc" -type f -name "*.jar" -exec cp -v {} lib/ \;
          ls -la lib

      - name: Write service account key & set path
        run: |
          printf '%s' '${{ secrets.GCP_SA_KEY }}' > "$RUNNER_TEMP/sa.json"
          echo "SA_KEY_PATH=$RUNNER_TEMP/sa.json" >> "$GITHUB_ENV"

      - name: Build classpath and Liquibase config
        id: classpath
        run: |
          set -euo pipefail
          shopt -s nullglob
          jars=("$GITHUB_WORKSPACE"/lib/*.jar)
          if [ ${#jars[@]} -eq 0 ]; then
            echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib"
            echo "FAILURE_STEP=Build classpath - JAR discovery" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=No JAR files found in lib directory" >> "$GITHUB_ENV"
            exit 1
          fi
          CLASSPATH=$(IFS=:; echo "${jars[*]}")
          echo "CLASSPATH=$CLASSPATH" >> "$GITHUB_ENV"
          echo "Using CLASSPATH: $CLASSPATH"
          
          LB_URL="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}"
          echo "LB_URL=$LB_URL" >> "$GITHUB_ENV"
          
          LB_BASE_CMD="\"$LB\" --driver=\"$LB_DRIVER\" --classpath=\"$CLASSPATH\" --url=\"$LB_URL\" --changeLogFile=\"$LB_CHANGELOG\" --log-level=\"$LB_LOG_LEVEL\""
          echo "LB_BASE_CMD=$LB_BASE_CMD" >> "$GITHUB_ENV"
          
          echo "Liquibase configuration ready"

      - name: Sanity check repo files
        run: |
          pwd
          ls -la
          ls -la liquibase
          ls -la liquibase/changesets

      - name: Validate changelog
        id: validate
        run: |
          if ! eval "$LB_BASE_CMD validate"; then
            echo "FAILURE_STEP=Changelog validation" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Changelog XML validation failed - check syntax and structure" >> "$GITHUB_ENV"
            exit 1
          fi

      - name: Check pending changes
        id: pending_changes
        run: |
          set -euo pipefail
          
          if ! STATUS_OUTPUT=$(eval "$LB_BASE_CMD status" 2>&1); then
            echo "FAILURE_STEP=Database connection check" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Unable to connect to BigQuery or retrieve status" >> "$GITHUB_ENV"
            echo "ERROR_OUTPUT=$STATUS_OUTPUT" >> "$GITHUB_ENV"
            exit 1
          fi
          
          echo "Status output:"
          echo "$STATUS_OUTPUT"
          
          if echo "$STATUS_OUTPUT" | grep -qE "changeset(s)? (has|have) not been applied"; then
            echo "has_pending_changes=true" >> "$GITHUB_OUTPUT"
            echo "Pending changes detected"
          else
            echo "has_pending_changes=false" >> "$GITHUB_OUTPUT"
            echo "No pending changes"
          fi

      - name: Dry run (updateSQL)
        if: env.DRY_RUN_ENABLED == 'true' && steps.pending_changes.outputs.has_pending_changes == 'true'
        run: |
          if ! eval "$LB_BASE_CMD --output-file=\"liquibase_update_${LB_TAG}.sql\" updateSQL"; then
            echo "FAILURE_STEP=Dry run SQL generation" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=updateSQL command failed - check changesets for SQL syntax errors" >> "$GITHUB_ENV"
            exit 1
          fi

      - name: Upload updateSQL artifact
        if: env.DRY_RUN_ENABLED == 'true' && steps.pending_changes.outputs.has_pending_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: "updateSQL-${{ env.LB_TAG }}"
          path: "**/liquibase_update_*.sql"

      - name: Tag pre-deploy state
        id: tag_predeploy
        if: steps.pending_changes.outputs.has_pending_changes == 'true'
        run: |
          if ! eval "$LB_BASE_CMD tag \"${LB_TAG}\""; then
            echo "FAILURE_STEP=Pre-deployment tagging" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Failed to create rollback tag ${LB_TAG}" >> "$GITHUB_ENV"
            exit 1
          fi
          
          echo "tagged=true" >> "$GITHUB_OUTPUT"
          echo "tag_name=$LB_TAG" >> "$GITHUB_OUTPUT"

      - name: Update (apply pending changes)
        id: lb_update
        if: steps.pending_changes.outputs.has_pending_changes == 'true'
        run: |
          # Capture the specific changeset that fails
          UPDATE_OUTPUT=""
          if ! UPDATE_OUTPUT=$(eval "$LB_BASE_CMD update" 2>&1); then
            
            echo "Update failed - capturing failure details..."
            
            # Extract failing changeset from Liquibase output
            FAILING_CHANGESET=$(echo "$UPDATE_OUTPUT" | grep -oE "changeset.*failed" | head -1 || echo "Unknown changeset")
            FAILING_SQL=$(echo "$UPDATE_OUTPUT" | grep -A 5 -B 5 "ERROR" | head -10 || echo "SQL error details not captured")
            
            echo "FAILURE_STEP=Liquibase update execution" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Failed at: $FAILING_CHANGESET" >> "$GITHUB_ENV"
            echo "FAILING_SQL<<EOF" >> "$GITHUB_ENV"
            echo "$FAILING_SQL" >> "$GITHUB_ENV"
            echo "EOF" >> "$GITHUB_ENV"
            
            echo "Executing immediate rollback to ${LB_TAG}"
            
            if ! ROLLBACK_OUTPUT=$(eval "$LB_BASE_CMD rollback --tag=\"${LB_TAG}\"" 2>&1); then
                echo "FAILURE_STEP=Critical: Rollback failed after update failure" >> "$GITHUB_ENV"
                echo "FAILURE_DETAILS=Database may be in inconsistent state. Manual intervention required." >> "$GITHUB_ENV"
                echo "ROLLBACK_ERROR<<EOF" >> "$GITHUB_ENV"
                echo "$ROLLBACK_OUTPUT" >> "$GITHUB_ENV"
                echo "EOF" >> "$GITHUB_ENV"
                exit 1
            fi
            
            echo "Rollback completed successfully"
            exit 1
          fi
          
          echo "All changesets applied successfully"

      - name: Post-deploy verification
        if: steps.lb_update.outcome == 'success'
        run: |
          echo "Verifying deployment..."
          
          if ! eval "$LB_BASE_CMD status --verbose"; then
            echo "FAILURE_STEP=Post-deployment verification" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Deployment succeeded but verification failed" >> "$GITHUB_ENV"
            exit 1
          fi
          
          echo "Deployment verification completed successfully"

      - name: Rollback on workflow failure (safety net)
        if: failure() && steps.tag_predeploy.outputs.tagged == 'true' && steps.lb_update.outcome != 'failure'
        run: |
          echo "Workflow failed outside of update step - executing safety rollback"
          echo "Rolling back to tag: ${{ steps.tag_predeploy.outputs.tag_name }}"
          
          if ! SAFETY_ROLLBACK=$(eval "$LB_BASE_CMD rollback --tag=\"${{ steps.tag_predeploy.outputs.tag_name }}\"" 2>&1); then
              echo "FAILURE_STEP=Safety net rollback failure" >> "$GITHUB_ENV"
              echo "FAILURE_DETAILS=Manual intervention required - rollback failed" >> "$GITHUB_ENV"
              echo "SAFETY_ROLLBACK_ERROR<<EOF" >> "$GITHUB_ENV"
              echo "$SAFETY_ROLLBACK" >> "$GITHUB_ENV"
              echo "EOF" >> "$GITHUB_ENV"
              exit 1
          fi
          
          echo "Safety net rollback completed"

      - name: Release Liquibase locks
        if: always()
        run: |
          eval "$LB_BASE_CMD releaseLocks" || echo "Failed to release locks (may not exist)"

      - name: Final status check
        if: always()
        run: |
          echo "Final database status:"
          eval "$LB_BASE_CMD status --verbose" || echo "Status check failed"

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ env.LB_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pending Changes**: ${{ steps.pending_changes.outputs.has_pending_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tagged for Rollback**: ${{ steps.tag_predeploy.outputs.tagged }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Status**: ${{ steps.lb_update.outcome }}" >> $GITHUB_STEP_SUMMARY
          
          # Display failure details if any step failed
          if [ -n "${FAILURE_STEP:-}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed Step**: ${{ env.FAILURE_STEP }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Failure Details**: ${{ env.FAILURE_DETAILS }}" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${ERROR_SUGGESTION:-}" ]; then
              echo "- **Suggested Fix**: ${{ env.ERROR_SUGGESTION }}" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${BIGQUERY_ERROR:-}" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### BigQuery Error Details:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "${{ env.BIGQUERY_ERROR }}" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${FULL_ERROR_OUTPUT:-}" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Complete Error Output:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "${{ env.FULL_ERROR_OUTPUT }}" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${ROLLBACK_ERROR:-}" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🚨 CRITICAL - Rollback Failed:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "${{ env.ROLLBACK_ERROR }}" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "**MANUAL INTERVENTION REQUIRED**" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${SAFETY_ROLLBACK_ERROR:-}" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🚨 CRITICAL - Safety Rollback Failed:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "${{ env.SAFETY_ROLLBACK_ERROR }}" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            
            # Add troubleshooting tips
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting Tips:" >> $GITHUB_STEP_SUMMARY
            echo "1. Check if the dataset \`my_poc_migrations\` exists in BigQuery" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify service account permissions for BigQuery" >> $GITHUB_STEP_SUMMARY
            echo "3. Review the specific changeset mentioned in the error" >> $GITHUB_STEP_SUMMARY
            echo "4. Test the SQL manually in BigQuery console" >> $GITHUB_STEP_SUMMARY
          else
            # Success cases
            if [ "${{ steps.lb_update.outcome }}" == "success" ]; then
              echo "- **Result**: ✅ Deployment successful" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.pending_changes.outputs.has_pending_changes }}" == "false" ]; then
              echo "- **Result**: ℹ️ No changes to deploy" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Result**: ⚠️ Deployment skipped" >> $GITHUB_STEP_SUMMARY
            fi
          fi