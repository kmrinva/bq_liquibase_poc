name: Liquibase to BigQuery (Service Account JSON)

on:
  workflow_dispatch:
  push:
    paths:
      - 'liquibase/**'
      - '.github/workflows/bq-liquibase.yml'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      BQ_DATASET: ${{ secrets.BQ_DATASET }}
      SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Prepare folders
        run: mkdir -p lib

      - name: Download Liquibase CLI
        run: |
          curl -L -o "$RUNNER_TEMP/liquibase.zip" https://github.com/liquibase/liquibase/releases/download/v4.29.2/liquibase-4.29.2.zip
          unzip -q "$RUNNER_TEMP/liquibase.zip" -d "$HOME/liquibase"
          chmod +x "$HOME/liquibase/liquibase"
          echo "LB=$HOME/liquibase/liquibase" >> "$GITHUB_ENV"

      - name: Download Liquibase BigQuery extension (JAR)
        run: |
          curl -L -o lib/liquibase-bigquery-4.33.0.jar https://repo1.maven.org/maven2/org/liquibase/ext/liquibase-bigquery/4.33.0/liquibase-bigquery-4.33.0.jar

      - name: Download BigQuery JDBC driver (Simba)
        run: |
          set -e
          curl -L -o "$RUNNER_TEMP/bqjdbc.zip" "https://storage.googleapis.com/simba-bq-release/jdbc/SimbaJDBCDriverforGoogleBigQuery42_1.6.3.1004.zip"
          unzip -q "$RUNNER_TEMP/bqjdbc.zip" -d "$RUNNER_TEMP/bqjdbc"
          # Copy ALL jars (root + lib/) into ./lib
          find "$RUNNER_TEMP/bqjdbc" -type f -name "*.jar" -exec cp -v {} lib/ \;
          ls -la lib

      - name: Write service account key & set path
        run: |
          printf '%s' '${{ secrets.GCP_SA_KEY }}' > "$RUNNER_TEMP/sa.json"
          echo "SA_KEY_PATH=$RUNNER_TEMP/sa.json" >> "$GITHUB_ENV"

      - name: Sanity check repo files
        run: |
          pwd
          ls -la
          ls -la liquibase
          ls -la liquibase/changesets

      # Run Liquibase from the liquibase/ folder so relative paths resolve
      - name: Set deploy tag
        shell: bash
        run: echo "LB_TAG=run-${ github.run_id }-${ github.run_attempt }" >> "$GITHUB_ENV"

      - name: Validate changelog
        shell: bash
        run: |
                  set -euo pipefail
                  # Build a classpath from absolute paths of all jars in lib/
                  shopt -s nullglob
                  jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                  if [ ${#jars[@]} -eq 0 ]; then
                    echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                    exit 1
                  fi
                  CLASSPATH=$(IFS=:; echo "${jars[*]}")
                  echo "Using CLASSPATH: $CLASSPATH"

                  "$LB" \
                    --driver=com.simba.googlebigquery.jdbc.Driver \
                    --classpath="$CLASSPATH" \
                    --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                    --changeLogFile=changelog.xml \
                    --log-level=info \
                    validate

      - name: Dry run (updateSQL)
        shell: bash
        run: |
                  set -euo pipefail
                  # Build a classpath from absolute paths of all jars in lib/
                  shopt -s nullglob
                  jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                  if [ ${#jars[@]} -eq 0 ]; then
                    echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                    exit 1
                  fi
                  CLASSPATH=$(IFS=:; echo "${jars[*]}")
                  echo "Using CLASSPATH: $CLASSPATH"

                  "$LB" \
                    --driver=com.simba.googlebigquery.jdbc.Driver \
                    --classpath="$CLASSPATH" \
                    --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                    --changeLogFile=changelog.xml \
                    --log-level=info \
                    --output-file="liquibase_update_${LB_TAG}.sql"
                    updateSQL

      - name: Upload updateSQL artifact
        uses: actions/upload-artifact@v4
        with:
          name: updateSQL-${ env.LB_TAG }
          path: liquibase_update_${ env.LB_TAG }.sql

      - name: Tag pre-deploy state
        shell: bash
        run: |
                  set -euo pipefail
                  # Build a classpath from absolute paths of all jars in lib/
                  shopt -s nullglob
                  jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                  if [ ${#jars[@]} -eq 0 ]; then
                    echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                    exit 1
                  fi
                  CLASSPATH=$(IFS=:; echo "${jars[*]}")
                  echo "Using CLASSPATH: $CLASSPATH"

                  "$LB" \
                    --driver=com.simba.googlebigquery.jdbc.Driver \
                    --classpath="$CLASSPATH" \
                    --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                    --changeLogFile=changelog.xml \
                    --log-level=info \
                    tag "${LB_TAG}"

      - name: Update (apply pending changes)
        shell: bash
        run: |
                  set -euo pipefail
                  # Build a classpath from absolute paths of all jars in lib/
                  shopt -s nullglob
                  jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                  if [ ${#jars[@]} -eq 0 ]; then
                    echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                    exit 1
                  fi
                  CLASSPATH=$(IFS=:; echo "${jars[*]}")
                  echo "Using CLASSPATH: $CLASSPATH"

                  "$LB" \
                    --driver=com.simba.googlebigquery.jdbc.Driver \
                    --classpath="$CLASSPATH" \
                    --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                    --changeLogFile=changelog.xml \
                    --log-level=info \
                    update

      - name: Post-deploy smoke checks
        shell: bash
        run: echo "OK"

      - name: Roll back to pre-deploy tag on failure
        if: failure()
        shell: bash
        run: |
          echo "Deployment failed. Rolling back to ${ LB_TAG }â€¦"
                    set -euo pipefail
                    # Build a classpath from absolute paths of all jars in lib/
                    shopt -s nullglob
                    jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                    if [ ${#jars[@]} -eq 0 ]; then
                      echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                      exit 1
                    fi
                    CLASSPATH=$(IFS=:; echo "${jars[*]}")
                    echo "Using CLASSPATH: $CLASSPATH"
          
                    "$LB" \
                      --driver=com.simba.googlebigquery.jdbc.Driver \
                      --classpath="$CLASSPATH" \
                      --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                      --changeLogFile=changelog.xml \
                      --log-level=info \
                      rollback --tag="${ LB_TAG }" || true

      - name: Release Liquibase locks
        if: always()
        shell: bash
        run: |
                    set -euo pipefail
                    # Build a classpath from absolute paths of all jars in lib/
                    shopt -s nullglob
                    jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                    if [ ${#jars[@]} -eq 0 ]; then
                      echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                      exit 1
                    fi
                    CLASSPATH=$(IFS=:; echo "${jars[*]}")
                    echo "Using CLASSPATH: $CLASSPATH"
          
                    "$LB" \
                      --driver=com.simba.googlebigquery.jdbc.Driver \
                      --classpath="$CLASSPATH" \
                      --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                      --changeLogFile=changelog.xml \
                      --log-level=info \
                      releaseLocks || true

      - name: Status (post success/rollback)
        if: always()
        shell: bash
        run: |
                    set -euo pipefail
                    # Build a classpath from absolute paths of all jars in lib/
                    shopt -s nullglob
                    jars=("$GITHUB_WORKSPACE"/lib/*.jar)
                    if [ ${#jars[@]} -eq 0 ]; then
                      echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib. Check previous steps."
                      exit 1
                    fi
                    CLASSPATH=$(IFS=:; echo "${jars[*]}")
                    echo "Using CLASSPATH: $CLASSPATH"
          
                    "$LB" \
                      --driver=com.simba.googlebigquery.jdbc.Driver \
                      --classpath="$CLASSPATH" \
                      --url="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}" \
                      --changeLogFile=changelog.xml \
                      --log-level=info \
                      status --verbose || true