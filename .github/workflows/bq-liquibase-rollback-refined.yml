name: Liquibase to BigQuery with Script rollback

on:
  workflow_dispatch:
  push:
    paths:
      - 'liquibase/**'
      - '.github/workflows/bq-liquibase.yml'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      BQ_DATASET: ${{ secrets.BQ_DATASET }}
      SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
      DRY_RUN_ENABLED: 'true'
      LB_TAG: run-${{ github.run_id }}-${{ github.run_attempt }}
      # Liquibase connection parameters (set after classpath is built)
      LB_DRIVER: com.simba.googlebigquery.jdbc.Driver
      LB_CHANGELOG: liquibase/changelog.xml
      LB_LOG_LEVEL: info

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Prepare folders
        run: mkdir -p lib

      - name: Download Liquibase CLI
        run: |
          curl -L -o "$RUNNER_TEMP/liquibase.zip" https://github.com/liquibase/liquibase/releases/download/v4.29.2/liquibase-4.29.2.zip
          unzip -q "$RUNNER_TEMP/liquibase.zip" -d "$HOME/liquibase"
          chmod +x "$HOME/liquibase/liquibase"
          echo "LB=$HOME/liquibase/liquibase" >> "$GITHUB_ENV"

      - name: Download Liquibase BigQuery extension (JAR)
        run: |
          curl -L -o lib/liquibase-bigquery-4.33.0.jar https://repo1.maven.org/maven2/org/liquibase/ext/liquibase-bigquery/4.33.0/liquibase-bigquery-4.33.0.jar

      - name: Download BigQuery JDBC driver (Simba)
        run: |
          set -e
          curl -L -o "$RUNNER_TEMP/bqjdbc.zip" "https://storage.googleapis.com/simba-bq-release/jdbc/SimbaJDBCDriverforGoogleBigQuery42_1.6.3.1004.zip"
          unzip -q "$RUNNER_TEMP/bqjdbc.zip" -d "$RUNNER_TEMP/bqjdbc"
          # Copy ALL jars (root + lib/) into ./lib
          find "$RUNNER_TEMP/bqjdbc" -type f -name "*.jar" -exec cp -v {} lib/ \;
          ls -la lib

      - name: Write service account key & set path
        run: |
          printf '%s' '${{ secrets.GCP_SA_KEY }}' > "$RUNNER_TEMP/sa.json"
          echo "SA_KEY_PATH=$RUNNER_TEMP/sa.json" >> "$GITHUB_ENV"

      - name: Build classpath and Liquibase config
        id: classpath
        run: |
          set -euo pipefail
          shopt -s nullglob
          jars=("$GITHUB_WORKSPACE"/lib/*.jar)
          if [ ${#jars[@]} -eq 0 ]; then
            echo "ERROR: No JARs found in $GITHUB_WORKSPACE/lib"
            exit 1
          fi
          CLASSPATH=$(IFS=:; echo "${jars[*]}")
          echo "CLASSPATH=$CLASSPATH" >> "$GITHUB_ENV"
          echo "Using CLASSPATH: $CLASSPATH"
          
          # Build complete Liquibase URL
          LB_URL="jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=${PROJECT_ID};DefaultDataset=${BQ_DATASET};OAuthType=0;OAuthServiceAcctEmail=${SA_EMAIL};OAuthPvtKeyPath=${SA_KEY_PATH}"
          echo "LB_URL=$LB_URL" >> "$GITHUB_ENV"
          
          # Create reusable Liquibase base command
          LB_BASE_CMD="\"$LB\" --driver=\"$LB_DRIVER\" --classpath=\"$CLASSPATH\" --url=\"$LB_URL\" --changeLogFile=\"$LB_CHANGELOG\" --log-level=\"$LB_LOG_LEVEL\""
          echo "LB_BASE_CMD=$LB_BASE_CMD" >> "$GITHUB_ENV"
          
          echo "Liquibase configuration ready"

      - name: Sanity check repo files
        run: |
          pwd
          ls -la
          ls -la liquibase
          ls -la liquibase/changesets

      - name: Validate changelog
        run: |
          eval "$LB_BASE_CMD validate"

      - name: Check pending changes
        id: pending_changes
        run: |
          set -euo pipefail
          
          # Get status to check if there are pending changes
          STATUS_OUTPUT=$(eval "$LB_BASE_CMD status" 2>&1 || true)
          
          echo "Status output:"
          echo "$STATUS_OUTPUT"
          
          # Check if there are unrun changesets
          if echo "$STATUS_OUTPUT" | grep -q "changesets have not been applied"; then
            echo "has_pending_changes=true" >> "$GITHUB_OUTPUT"
            echo "Pending changes detected"
          else
            echo "has_pending_changes=false" >> "$GITHUB_OUTPUT"
            echo "No pending changes"
          fi

      - name: Dry run (updateSQL)
        if: env.DRY_RUN_ENABLED == 'true' && steps.pending_changes.outputs.has_pending_changes == 'true'
        run: |
          eval "$LB_BASE_CMD --output-file=\"liquibase_update_${LB_TAG}.sql\" updateSQL"

      - name: Upload updateSQL artifact
        if: env.DRY_RUN_ENABLED == 'true' && steps.pending_changes.outputs.has_pending_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: "updateSQL-${{ env.LB_TAG }}"
          path: "**/liquibase_update_*.sql"

      - name: Tag pre-deploy state
        id: tag_predeploy
        if: steps.pending_changes.outputs.has_pending_changes == 'true'
        run: |
          eval "$LB_BASE_CMD tag \"${LB_TAG}\""
          
          echo "tagged=true" >> "$GITHUB_OUTPUT"
          echo "tag_name=$LB_TAG" >> "$GITHUB_OUTPUT"

      - name: Update (apply pending changes)
        id: lb_update
        if: steps.pending_changes.outputs.has_pending_changes == 'true'
        run: |
          # Attempt update with immediate rollback on failure (critical for non-transactional BigQuery)
          if ! eval "$LB_BASE_CMD update"; then
            
            echo "❌ Update failed at changeset level - executing immediate rollback to ${LB_TAG}"
            
            eval "$LB_BASE_CMD rollback --tag=\"${LB_TAG}\"" || {
                echo "💥 CRITICAL: Inline rollback failed! Database may be in inconsistent state."
                echo "Manual intervention required. Tag: ${LB_TAG}"
                exit 1
              }
            
            echo "✅ Inline rollback completed successfully"
            exit 1
          fi
          
          echo "✅ All changesets applied successfully"

      - name: Post-deploy verification
        if: steps.lb_update.outcome == 'success'
        run: |
          echo "Verifying deployment..."
          
          # Show final status
          eval "$LB_BASE_CMD status --verbose"
          
          # Add any custom verification checks here
          echo "Deployment verification completed successfully"

      - name: Rollback on workflow failure (safety net)
        if: failure() && steps.tag_predeploy.outputs.tagged == 'true' && steps.lb_update.outcome != 'failure'
        run: |
          echo "⚠️  Workflow failed outside of update step (validation, post-checks, etc.)"
          echo "Rolling back to tag: ${{ steps.tag_predeploy.outputs.tag_name }}"
          
          eval "$LB_BASE_CMD rollback --tag=\"${{ steps.tag_predeploy.outputs.tag_name }}\"" || {
              echo "💥 Safety net rollback failed. Manual intervention required."
              exit 1
            }
          
          echo "✅ Safety net rollback completed"

      - name: Release Liquibase locks
        if: always()
        run: |
          eval "$LB_BASE_CMD releaseLocks" || echo "Failed to release locks (may not exist)"

      - name: Final status check
        if: always()
        run: |
          echo "Final database status:"
          eval "$LB_BASE_CMD status --verbose" || echo "Status check failed"

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ env.LB_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pending Changes**: ${{ steps.pending_changes.outputs.has_pending_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tagged for Rollback**: ${{ steps.tag_predeploy.outputs.tagged }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Status**: ${{ steps.lb_update.outcome }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.lb_update.outcome }}" == "success" ]; then
            echo "- **Result**: ✅ Deployment successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.lb_update.outcome }}" == "failure" ]; then
            echo "- **Result**: ❌ Deployment failed, rollback attempted" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.pending_changes.outputs.has_pending_changes }}" == "false" ]; then
            echo "- **Result**: ℹ️ No changes to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Result**: ⚠️ Deployment skipped" >> $GITHUB_STEP_SUMMARY
          fi