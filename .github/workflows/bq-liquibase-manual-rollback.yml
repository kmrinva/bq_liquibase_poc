# Fix for the two specific errors in the rollback workflow

# Replace the "Check current database status" step with this:
      - name: Check current database status
        id: current_status
        run: |
          echo "## Current Database Status" >> $GITHUB_STEP_SUMMARY
          
          if ! STATUS_OUTPUT=$(eval "$LB_BASE_CMD status --verbose" 2>&1); then
            echo "ERROR: Unable to connect to database or retrieve status" >> $GITHUB_STEP_SUMMARY
            echo "FAILURE_STEP=Database connection check" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Unable to connect to BigQuery or retrieve status" >> "$GITHUB_ENV"
            exit 1
          fi
          
          echo "Database status retrieved successfully" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$STATUS_OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Count applied changesets - fix the format issue
          APPLIED_COUNT=$(echo "$STATUS_OUTPUT" | grep -c "changeset.*was executed" 2>/dev/null || printf "0")
          echo "**Applied Changesets**: $APPLIED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "applied_count=$APPLIED_COUNT" >> "$GITHUB_OUTPUT"

# Replace the "Generate rollback SQL (dry run)" step with this:
      - name: Generate rollback SQL (dry run)
        id: rollback_sql
        run: |
          echo "## Rollback Preview" >> $GITHUB_STEP_SUMMARY
          
          # Fix the ROLLBACK_TAG_NAME variable reference
          ROLLBACK_TAG_NAME="${{ env.ROLLBACK_TAG_NAME }}"
          
          # Determine rollback command
          if [ -n "${{ env.ROLLBACK_TAG }}" ]; then
            ROLLBACK_CMD="$LB_BASE_CMD rollbackSQL --tag=\"${{ env.ROLLBACK_TAG }}\""
            ROLLBACK_DESC="to tag '${{ env.ROLLBACK_TAG }}'"
          else
            ROLLBACK_CMD="$LB_BASE_CMD rollbackSQL --count=${{ env.ROLLBACK_COUNT }}"
            ROLLBACK_DESC="${{ env.ROLLBACK_COUNT }} changeset(s)"
          fi
          
          echo "Generating rollback SQL for $ROLLBACK_DESC..."
          
          # Fix the output file reference
          OUTPUT_FILE="rollback_preview_${ROLLBACK_TAG_NAME}.sql"
          
          if ! ROLLBACK_SQL_OUTPUT=$(eval "$ROLLBACK_CMD --output-file=\"$OUTPUT_FILE\"" 2>&1); then
            echo "ERROR: Failed to generate rollback SQL" >> $GITHUB_STEP_SUMMARY
            echo "FAILURE_STEP=Rollback SQL generation" >> "$GITHUB_ENV"
            echo "FAILURE_DETAILS=Failed to generate rollback SQL: $ROLLBACK_SQL_OUTPUT" >> "$GITHUB_ENV"
            exit 1
          fi
          
          echo "**Rollback SQL generated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: $ROLLBACK_DESC" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: $OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
          
          # Show preview of SQL
          if [ -f "$OUTPUT_FILE" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Rollback SQL Preview:" >> $GITHUB_STEP_SUMMARY
            echo '```sql' >> $GITHUB_STEP_SUMMARY
            head -50 "$OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi